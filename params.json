{"name":"stringmetric","tagline":"String metrics and phonetic algorithms for Scala.","body":"The stringmetric library provides facilities to perform approximate string matching, measurement of string similarity/distance, indexing by word pronunciation, and sounds-like comparisons. In addition to the core library, each metric and algorithm has a command line interface. Heavy emphasis is placed on unit testing and performance (verified via microbenchmark suites).\r\n\r\n## Metrics and Algorithms\r\n* __[Dice / Sorensen](http://en.wikipedia.org/wiki/Dice%27s_coefficient)__ (Similarity metric)\r\n* __[Double Metaphone](http://en.wikipedia.org/wiki/Metaphone)__ (Queued phonetic metric and algorithm)\r\n* __[Hamming](http://en.wikipedia.org/wiki/Hamming_distance)__ (Similarity metric)\r\n* __[Jaccard](http://en.wikipedia.org/wiki/Jaccard_index)__ (Similarity metric)\r\n* __[Jaro](http://en.wikipedia.org/wiki/Jaro-Winkler_distance)__ (Similarity metric)\r\n* __[Jaro-Winkler](http://en.wikipedia.org/wiki/Jaro-Winkler_distance)__ (Similarity metric)\r\n* __[Levenshtein](http://en.wikipedia.org/wiki/Levenshtein_distance)__ (Similarity metric)\r\n* __[Metaphone](http://en.wikipedia.org/wiki/Metaphone)__ (Phonetic metric and algorithm)\r\n* __[Monge-Elkan](http://www.cs.cmu.edu/~pradeepr/papers/ijcai03.pdf)__ (Queued similarity metric)\r\n* __[Match Rating Approach](http://en.wikipedia.org/wiki/Match_rating_approach)__ (Queued phonetic metric and algorithm)\r\n* __[Needleman-Wunch](http://en.wikipedia.org/wiki/Needleman%E2%80%93Wunsch_algorithm)__ (Queued similarity metric)\r\n* __[N-Gram](http://en.wikipedia.org/wiki/N-gram)__ (Similarity metric and algorithm)\r\n* __[NYSIIS](http://en.wikipedia.org/wiki/New_York_State_Identification_and_Intelligence_System)__ (Phonetic metric and algorithm)\r\n* __[Overlap](http://en.wikipedia.org/wiki/Overlap_coefficient)__ (Similarity metric)\r\n* __[Ratcliff-Obershelp](http://xlinux.nist.gov/dads/HTML/ratcliffObershelp.html)__ (Similarity metric)\r\n* __[Refined NYSIIS](http://www.markcrocker.com/rexxtipsntricks/rxtt28.2.0482.html)__ (Phonetic metric and algorithm)\r\n* __[Refined Soundex](http://ntz-develop.blogspot.com/2011/03/phonetic-algorithms.html)__ (Phonetic metric and algorithm)\r\n* __[Tanimoto](http://en.wikipedia.org/wiki/Tanimoto_coefficient)__ (Queued similarity metric)\r\n* __[Tversky](http://en.wikipedia.org/wiki/Tversky_index)__ (Queued similarity metric)\r\n* __[Smith-Waterman](http://en.wikipedia.org/wiki/Smith%E2%80%93Waterman_algorithm)__ (Queued similarity metric)\r\n* __[Soundex](http://en.wikipedia.org/wiki/Soundex)__ (Phonetic metric and algorithm)\r\n* __Weighted Levenshtein__ (Similarity metric)\r\n\r\n\r\n## Installation\r\nAvailable on the [Maven Central Repository](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.rockymadden.stringmetric%22). Depending on the core sub-project shown below (add others, like the CLI, as needed):\r\n\r\n\r\n__SBT:__\r\n```scala\r\nlibraryDependencies += \"com.rockymadden.stringmetric\" % \"stringmetric-core\" % \"0.24.0\"\r\n```\r\n\r\n---\r\n\r\n__Gradle:__\r\n```groovy\r\ncompile 'com.rockymadden.stringmetric:stringmetric-core:0.24.0'\r\n```\r\n\r\n---\r\n\r\n__Maven:__\r\n```xml\r\n<dependency>\r\n\t<artifactId>com.rockymadden.stringmetric</artifactId>\r\n\t<groupId>stringmetric-core</groupId>\r\n\t<version>0.24.0</version>\r\n</dependency>\r\n```\r\n\r\n## Similarity package\r\nUseful for approximate string matching and measurement of string distance. Most metrics calculate the similarity of two strings as a double with a value between 0 and 1. A value of 0 being completely different and a value of 1 being completely similar.\r\n\r\n\r\n__Dice / Sorensen Metric:__ _(Note you must specify the size of the n-gram you wish to use. This can be done implicitly.)_\r\n```scala\r\nprintln(DiceSorensenMetric.compare(\"night\", \"nacht\")(1))\r\nprintln(DiceSorensenMetric.compare(\"context\", \"contact\")(1))\r\n```\r\n\r\nOutput:\r\n```\r\n0.6\r\n0.7142857142857143\r\n```\r\n\r\n---\r\n\r\n__Hamming Metric:__\r\n```scala\r\nprintln(HammingMetric.compare(\"toned\", \"roses\"))\r\nprintln(HammingMetric.compare(\"1011101\", \"1001001\"))\r\n```\r\n\r\nOutput: _(Note the exception of integers, rather than doubles, being returned.)_\r\n```\r\n3\r\n2\r\n```\r\n\r\n---\r\n\r\n__Jaccard Metric:__ _(Note you must specify the size of the n-gram you wish to use. This can be done implicitly.)_\r\n```scala\r\nprintln(JaccardMetric.compare(\"night\", \"nacht\")(1))\r\nprintln(JaccardMetric.compare(\"context\", \"contact\")(1))\r\n```\r\n\r\nOutput:\r\n```\r\n0.3\r\n0.35714285714285715\r\n```\r\n\r\n---\r\n\r\n__Jaro Metric:__\r\n```scala\r\nprintln(JaroMetric.compare(\"dwayne\", \"duane\"))\r\nprintln(JaroMetric.compare(\"jones\", \"johnson\"))\r\nprintln(JaroMetric.compare(\"fvie\", \"ten\"))\r\n```\r\n\r\nOutput:\r\n```\r\n0.8222222222222223\r\n0.7904761904761904\r\n0\r\n```\r\n\r\n---\r\n\r\n__Jaro-Winkler Metric:__\r\n```scala\r\nprintln(JaroWinklerMetric.compare(\"dwayne\", \"duane\"))\r\nprintln(JaroWinklerMetric.compare(\"jones\", \"johnson\"))\r\nprintln(JaroWinklerMetric.compare(\"fvie\", \"ten\"))\r\n```\r\n\r\nOutput:\r\n```\r\n0.8400000000000001\r\n0.8323809523809523\r\n0\r\n```\r\n\r\n---\r\n\r\n__Levenshtein Metric:__\r\n```scala\r\nprintln(LevenshteinMetric.compare(\"sitting\", \"kitten\"))\r\nprintln(LevenshteinMetric.compare(\"cake\", \"drake\"))\r\n```\r\n\r\nOutput: _(Note the exception of integers, rather than doubles, being returned.)_\r\n```\r\n3\r\n2\r\n```\r\n\r\n---\r\n\r\n\r\n__N-Gram Metric:__ _(Note you must specify the size of the n-gram you wish to use. This can be done implicitly.)_\r\n```scala\r\nprintln(NGramMetric.compare(\"night\", \"nacht\")(1))\r\nprintln(NGramMetric.compare(\"night\", \"nacht\")(2))\r\nprintln(NGramMetric.compare(\"context\", \"contact\")(2))\r\n```\r\n\r\nOutput:\r\n```\r\n0.6\r\n0.25\r\n0.5\r\n```\r\n\r\n---\r\n\r\n__N-Gram Algorithm:__ _(Note you must specify the size of the n-gram you wish to use. This can be done implicitly.)_\r\n```scala\r\nprintln(NGramAlgorithm.compute(\"abcdefghijklmnopqrstuvwxyz\")(1))\r\nprintln(NGramAlgorithm.compute(\"abcdefghijklmnopqrstuvwxyz\")(2))\r\nprintln(NGramAlgorithm.compute(\"abcdefghijklmnopqrstuvwxyz\")(3))\r\n```\r\n\r\nOutput:\r\n```\r\nArray(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\r\nArray(\"ab\", \"bc\", \"cd\", \"de\", \"ef\", \"fg\", \"gh\", \"hi\", \"ij\", \"jk\", \"kl\", \"lm\", \"mn\", \"no\", \"op\", \"pq\", \"qr\", \"rs\", \"st\", \"tu\", \"uv\", \"vw\", \"wx\", \"xy\", \"yz\")\r\nArray(\"abc\", \"bcd\", \"cde\", \"def\", \"efg\", \"fgh\", \"ghi\", \"hij\", \"ijk\", \"jkl\", \"klm\", \"lmn\", \"mno\", \"nop\", \"opq\", \"pqr\", \"qrs\", \"rst\", \"stu\", \"tuv\", \"uvw\", \"vwx\", \"wxy\", \"xyz\")\r\n```\r\n\r\n---\r\n\r\n__Overlap Metric:__ _(Note you must specify the size of the n-gram you wish to use. This can be done implicitly.)_\r\n```scala\r\nprintln(OverlapMetric.compare(\"night\", \"nacht\")(1))\r\nprintln(OverlapMetric.compare(\"context\", \"contact\")(1))\r\n```\r\n\r\nOutput:\r\n```\r\n0.6\r\n0.7142857142857143\r\n```\r\n\r\n---\r\n\r\n__Ratcliff/Obershelp Metric:__\r\n```scala\r\nprintln(RatcliffObershelpMetric.compare(\"aleksander\", \"alexandre\"))\r\nprintln(RatcliffObershelpMetric.compare(\"pennsylvania\", \"pencilvaneya\"))\r\n```\r\n\r\nOutput:\r\n```\r\n0.7368421052631579\r\n0.6666666666666666\r\n```\r\n\r\n---\r\n\r\n__Weighted Levenshtein Metric:__ _(Note you must specify the weight of each operation. Delete, insert, and then substitute. This can be done implicitly.)_\r\n```scala\r\nprintln(WeightedLevenshteinMetric.compare(\"book\", \"back\")(10, 0.1, 1))\r\nprintln(WeightedLevenshteinMetric.compare(\"hosp\", \"hospital\")(10, 0.1, 1))\r\nprintln(WeightedLevenshteinMetric.compare(\"hospital\", \"hosp\")(10, 0.1, 1))\r\n```\r\n\r\nOutput: _(Note that while a double is returned, it can be outside the range of 0 to 1, based upon the weights used.)_\r\n```\r\n2\r\n0.4\r\n40\r\n```\r\n\r\n## Phonetic package\r\nUseful for indexing by word pronunciation and performing sounds-like comparisons. All metrics return a boolean value indicating if the two strings sound the same, per the algorithm used. All metrics have an algorithm counterpart which provide the means to perform indexing by word pronunciation.\r\n\r\n__Metaphone Metric:__\r\n```scala\r\nprintln(MetaphoneMetric.compare(\"merci\", \"mercy\"))\r\nprintln(MetaphoneMetric.compare(\"dumb\", \"gum\"))\r\n```\r\n\r\nOutput:\r\n```\r\ntrue\r\nfalse\r\n```\r\n\r\n---\r\n\r\n__Metaphone Algorithm:__\r\n```scala\r\nprintln(MetaphoneAlgorithm.compute(\"dumb\"))\r\nprintln(MetaphoneAlgorithm.compute(\"knuth\"))\r\n```\r\n\r\nOutput:\r\n```\r\ntm\r\nn0\r\n```\r\n\r\n---\r\n\r\n__NYSIIS Metric:__\r\n```scala\r\nprintln(NysiisMetric.compare(\"ham\", \"hum\"))\r\nprintln(NysiisMetric.compare(\"dumb\", \"gum\"))\r\n```\r\n\r\nOutput:\r\n```\r\ntrue\r\nfalse\r\n```\r\n\r\n---\r\n\r\n__NYSIIS Algorithm:__\r\n```scala\r\nprintln(NysiisAlgorithm.compute(\"macintosh\"))\r\nprintln(NysiisAlgorithm.compute(\"knuth\"))\r\n```\r\n\r\nOutput:\r\n```\r\nmcant\r\nnnat\r\n```\r\n\r\n---\r\n\r\n__Refined NYSIIS Metric:__\r\n```scala\r\nprintln(RefinedNysiisMetric.compare(\"ham\", \"hum\"))\r\nprintln(RefinedNysiisMetric.compare(\"dumb\", \"gum\"))\r\n```\r\n\r\nOutput:\r\n```\r\ntrue\r\nfalse\r\n```\r\n\r\n---\r\n\r\n__Refined NYSIIS Algorithm:__\r\n```scala\r\nprintln(RefinedNysiisAlgorithm.compute(\"macintosh\"))\r\nprintln(RefinedNysiisAlgorithm.compute(\"westerlund\"))\r\n```\r\n\r\nOutput:\r\n```\r\nmcantas\r\nwastarlad\r\n```\r\n\r\n---\r\n\r\n__Refined Soundex Metric:__\r\n```scala\r\nprintln(RefinedSoundexMetric.compare(\"robert\", \"rupert\"))\r\nprintln(RefinedSoundexMetric.compare(\"robert\", \"rubin\"))\r\n```\r\n\r\nOutput:\r\n```\r\ntrue\r\nfalse\r\n```\r\n\r\n---\r\n\r\n__Refined Soundex Algorithm:__\r\n```scala\r\nprintln(RefinedSoundexAlgorithm.compute(\"hairs\"))\r\nprintln(RefinedSoundexAlgorithm.compute(\"lambert\"))\r\n```\r\n\r\nOutput:\r\n```\r\nh093\r\nl7081096\r\n```\r\n\r\n---\r\n\r\n__Soundex Metric:__\r\n```scala\r\nprintln(SoundexMetric.compare(\"robert\", \"rupert\"))\r\nprintln(SoundexMetric.compare(\"robert\", \"rubin\"))\r\n```\r\n\r\nOutput:\r\n```\r\ntrue\r\nfalse\r\n```\r\n\r\n---\r\n\r\n__Soundex Algorithm:__\r\n```scala\r\nprintln(SoundexAlgorithm.compute(\"rupert\"))\r\nprintln(SoundexAlgorithm.compute(\"lukasiewicz\"))\r\n```\r\n\r\nOutput:\r\n```\r\nr163\r\nl222\r\n```\r\n\r\n## Decorating\r\nIt is possible to decorate algorithms and metrics with additional functionality. The most common decorations are filters, which are useful for filtering strings prior to evaluation (e.g. ignore case, ignore non-alpha, ignore spaces). __NOTE:__ Memoization decorator queued.\r\n\r\nBasic examples with no filtering:\r\n```scala\r\nJaroWinklerMetric.compare(\"string1\", \"string2\")\r\nJaroWinklerMetric().compare(\"string1\", \"string2\")\r\n(new JaroWinklerMetric).compare(\"string1\", \"string2\")\r\n```\r\n\r\n---\r\n\r\nBasic example with single filter:\r\n```scala\r\n(new JaroWinklerMetric with AsciiLetterCaseStringFilter).compare(\"string1\", \"string2\")\r\n```\r\n\r\n---\r\n\r\nBasic example with stacked filter. Filters are applied in reverse order:\r\n```scala\r\n(new JaroWinklerMetric with AsciiLetterCaseStringFilter with AsciiLetterOnlyStringFilter).compare(\"string1\", \"string2\")\r\n```\r\n\r\n## Convenience objects\r\nConvenience objects are available to make interactions with the library easier.\r\n\r\n__StringAlgorithm:__\r\n```scala\r\n// Easy access to compute methods.\r\nStringAlgorithm.computeWithMetaphone(\"string\")\r\n\r\n// Easy access to types and companion objects.\r\nval metaphone: StringAlgorithm.MetaphoneAlgorithm = StringAlgorithm.MetaphoneAlgorithm()\r\n```\r\n\r\n---\r\n\r\n__StringMetric:__\r\n```scala\r\n// Easy access to compare methods.\r\nStringMetric.compareWithJaroWinkler(\"string1\", \"string2\")\r\n\r\n// Easy access to types and companion objects.\r\nval jaro: StringMetric.JaroMetric = StringMetric.JaroMetric()\r\n```\r\n\r\n---\r\n\r\n__StringFilter:__\r\n```scala\r\n// Easy access to types and instances.\r\nval metaphone: StringAlgorithm.MetaphoneAlgorithm = StringAlgorithm.MetaphoneAlgorithm() with StringFilter.asciiControl\r\nval asciiSpace: StringFilter.AsciiSpaceStringFilter = StringFilter.asciiControl\r\n```\r\n\r\n---\r\n\r\n__ConfigurableStringAlgorithm:__\r\n```scala\r\n// Easy access to compute methods.\r\nConfigurableStringAlgorithm.computeWithNGram(\"string\")(2)\r\n\r\n// Easy access to types and companion objects.\r\nval nGram: ConfigurableStringAlgorithm.NGramAlgorithm: = ConfigurableStringAlgorithm.NGramAlgorithm()\r\n```\r\n\r\n---\r\n\r\n__ConfigurableStringMetric:__\r\n```scala\r\n// Easy access to compare methods.\r\nConfigurableStringMetric.compareWithDiceSorensen(\"string1\", \"string2\")(2)\r\n\r\n// Easy access to types and companion objects.\r\nval diceSorensen: ConfigurableStringMetric.DiceSorensenMetric = ConfigurableStringMetric.DiceSorensenMetric()\r\n```\r\n\r\n## Command line interfaces\r\nEvery metric and algorithm has a command line interface. Said code is housed in a separate sub-project from the core library called \"stringmetric-cli\".\r\n\r\nThe help option prints command syntax and usage:\r\n```shell\r\n$ metaphoneMetric --help\r\nCompares two strings to determine if they are phonetically similarly, per the Metaphone algorithm.\r\n\r\nSyntax:\r\n  metaphoneMetric [Options] string1 string2...\r\n\r\nOptions:\r\n  -h, --help\r\n    Outputs description, syntax, and options.\r\n```\r\n\r\n```shell\r\n$ jaroWinklerMetric --help\r\nCompares two strings to calculate the Jaro-Winkler distance.\r\n\r\nSyntax:\r\n  jaroWinklerMetric [Options] string1 string2...\r\n\r\nOptions:\r\n  -h, --help\r\n    Outputs description, syntax, and options.\r\n```\r\n\r\n---\r\n\r\nCompare \"dog\" to \"dawg\":\r\n```shell\r\n$ metaphoneMetric dog dawg\r\ntrue\r\n```\r\n\r\n```shell\r\n$ jaroWinklerMetric dog dawg\r\n0.75\r\n```\r\n\r\n---\r\n\r\nGet the phonetic representation of \"dog\" using the Metaphone phonetic algorithm:\r\n```shell\r\n$ metaphoneAlgorithm dog\r\ntk\r\n```\r\n\r\n## Requirements\r\n* Scala 2.10.x\r\n* Gradle 1.x\r\n\r\n## Versioning\r\n[Semantic Versioning v2.0](http://semver.org/)\r\n\r\n## License\r\n[Apache License v2.0](http://www.apache.org/licenses/LICENSE-2.0)\r\n\r\n## Bugs and Issues\r\nPlease submit bugs and issues via [GitHub issues](https://github.com/rockymadden/stringmetric/issues).\r\n\r\n## Questions, Comments, and Requests\r\nPlease contact me directly. Find all my contact information on my [personal website](http://rockymadden.com/).\r\n","google":"UA-20432336-1","note":"Don't delete this file! It's used internally to help with page regeneration."}