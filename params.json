{"google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"stringmetric","tagline":"A small library of string metrics and phonetic algorithms.","body":"A small library of string metrics and phonetic algorithms. Each has a command line interface, is thoroughly unit tested, and performant (verified via microbenchmark suites). \r\n\r\n* __Similarity metrics__ determine the distance or coefficient between two arguments.\r\n* __Phonetic metrics__ determine if two arguments sound the same phonetically. \r\n* __Phonetic algorithms__ determine the phonetic representation of the argument passed. All phonetic metrics have a standalone algorithm counterpart. \r\n* __Filters__ clean up arguments prior to evaluation. Filters can be combined via trait stacking.\r\n\r\n## Metrics and Algorithms\r\n* __[Dice / Sorensen](http://en.wikipedia.org/wiki/Dice%27s_coefficient)__ (Similarity metric)\r\n* __[Hamming](http://en.wikipedia.org/wiki/Hamming_distance)__ (Similarity metric)\r\n* __[Jaro](http://en.wikipedia.org/wiki/Jaro-Winkler_distance)__ (Similarity metric)\r\n* __[Jaro-Winkler](http://en.wikipedia.org/wiki/Jaro-Winkler_distance)__ (Similarity metric)\r\n* __[Levenshtein](http://en.wikipedia.org/wiki/Levenshtein_distance)__ (Similarity metric)\r\n* __[Metaphone](http://en.wikipedia.org/wiki/Metaphone)__ (Phonetic metric and algorithm)\r\n* __[N-Gram](http://en.wikipedia.org/wiki/N-gram)__ (Similarity metric and algorithm)\r\n* __[NYSIIS](http://en.wikipedia.org/wiki/New_York_State_Identification_and_Intelligence_System)__ (Phonetic metric and algorithm)\r\n* __[Refined NYSIIS](http://www.markcrocker.com/rexxtipsntricks/rxtt28.2.0482.html)__ (Phonetic metric and algorithm)\r\n* __[Refined Soundex](http://ntz-develop.blogspot.com/2011/03/phonetic-algorithms.html)__ (Phonetic metric and algorithm)\r\n* __[Soundex](http://en.wikipedia.org/wiki/Soundex)__ (Phonetic metric and algorithm)\r\n* __Weighted Levenshtein__ (Similarity metric)\r\n\r\n## Using the API\r\nBasic example with no filtering:\r\n```scala\r\nval distance = JaroWinklerMetric.compare(\"string1\", \"string2\")\r\n\r\nif (distance >= 0.9) println(\"It's likely you're a match!\")\r\n```\r\n\r\nBasic example with single filter:\r\n```scala\r\nval distance = JaroWinklerMetric.compare(\"string1\", \"string2\")\r\n    (new StringFilterDelegate with AsciiLetterCaseStringFilter)\r\n\r\nif (distance >= 0.9) println(\"It's likely you're a match!\")\r\n```\r\n\r\nBasic example with stacked filter. Filters are applied in reverse order:\r\n```scala\r\nval distance = JaroWinklerMetric.compare(\"string1\", \"string2\")\r\n    (new StringFilterDelegate with AsciiLetterCaseStringFilter with AsciiLetterOnlyStringFilter)\r\n\r\nif (distance >= 0.9) println(\"It's likely you're a match!\")\r\n```\r\n\r\nYou can also use the StringMetric, StringAlgorithm, and StringFilter convenience objects:\r\n```scala\r\nif (StringMetric.compareWithJaroWinkler(\"string1\", \"string2\") >= 0.9) \r\n    println(\"It's likely you're a match!\")\r\n \r\nif (StringMetric.compareWithJaroWinkler(\"string1\", \"string2\")(StringFilter.asciiLetterCase) >= 0.9) \r\n    println(\"It's likely you're a match!\")\r\n```\r\n\r\n## Using the CLI\r\nThe help option prints command syntax and usage:\r\n```shell\r\n$ jaroWinklerMetric --help\r\n$ metaphoneMetric --help\r\n$ metaphoneAlgorithm --help\r\n```\r\n\r\nCompare \"abc\" to \"xyz\" using the Jaro-Winkler metric:\r\n```shell\r\n$ jaroWinklerMetric abc xyz\r\n```\r\n\r\nCompare \"abc \"to \"xyz\" using the Metaphone metric:\r\n```shell\r\n$ metaphoneMetric abc xyz\r\n```\r\n\r\nGet the phonetic representation of \"abc\" using the Metaphone phonetic algorithm:\r\n```shell \r\n$ metaphoneAlgorithm abc\r\n```\r\n\r\n## Depending on the API\r\nAvailable on the [Maven Central Repository](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.rockymadden.stringmetric%22):\r\n\r\n* __groupId__: com.rockymadden.stringmetric\r\n* __artifactId__: stringmetric-core\r\n\r\n## Depending on the CLI\r\nAvailable on the [Maven Central Repository](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.rockymadden.stringmetric%22):\r\n\r\n* __groupId__: com.rockymadden.stringmetric\r\n* __artifactId__: stringmetric-cli\r\n\r\n## Building the API\r\n```shell\r\n$ gradle :stringmetric-core:jar\r\n```\r\n\r\n## Building the CLI\r\n```shell\r\n$ gradle :stringmetric-cli:tar\r\n```\r\n\r\n## Requirements\r\n* Scala 2.9.x\r\n* Gradle 1.x\r\n\r\n## Todo\r\n* SmithWaterman\r\n* MongeElkan\r\n* NeedlemanWunch\r\n* Jaccard\r\n* Double Metaphone\r\n* Memoization decorator\r\n\r\n## Versioning\r\n[Semantic Versioning v2.0](http://semver.org/)\r\n\r\n## License\r\n[Apache License v2.0](http://www.apache.org/licenses/LICENSE-2.0)\r\n\r\n## Questions and Comments\r\nReach me at <stringmetric@rockymadden.com>."}